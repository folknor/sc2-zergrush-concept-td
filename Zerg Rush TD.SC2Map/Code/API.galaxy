
// ZR reserved unit custom value id ranges
// 1  - 19 = core
// 20 - 59 = towers
// 60 - 69 = intro
// 70 - 109 = heroes

// Call this to set up the library, call it any time, but
// before any other ZR API access.
void InitZergRushCore();

// Call this to start the intro cinematic you've selected.
// This is optional.
// But if you don't include a intro file, you need to implement
// this function yourself (can be an empty function, of course).
// Always call after entering cinematic mode if you are planning to at all.
void StartZergRushIntro();

// Call this when you are ready for hero selection.
// If this is not called, players will not get a hero.
// In which case, only player 1 will have anything to do unless
// the map maker provides something for the other players.
void DoHeroSelection(string mapName, string welcomeMessage);

// Call this to show the start waves button for the first time.
// First wave doesn't start automatically, the player has to press the button.
// Then, unless the map maker pauses the process, stages and waves roll automatically.
// Returns false if there are no more stages or if the button is already shown.
bool ShowWaveButton();

// Call this method to forcefully start the next stage.
// If a stage is currently running, both stages will run at the same time.
// There is no limit to the number of stages that can run simultaneously.
// Returns false if there are no more stages. Never returns false in Survival mode.
bool ForceStartNextStage();

// Calling this function does the following:
//  - if a stage is currently running
//    * Finish all waves in the stage
//    * Never show (or hide, if currently visible) "Run next stage" button to players
//    * Do not automatically start next stage when current timer runs out
//  - if called immediately after ZRE_STAGE_FINISHED ("StageFinished") trigger
//    it has no effect. The "next" (current, really) stage is started immediately without delay after "StageFinished".
//    Which means you need to call this after the ZRE_STAGE_STARTED ("StageStarted") event instead. Not on StageFinished.
//
// After you call this method, you need to either call ShowWaveButton() or ForceStartNextStage() at some point.
void PauseAfterStage();

// Call this if you want enemies spawned on your map
// to be more or less difficult than the norm.
// For example 1.5 would make things 50% more difficult. Roughly.
// Whether it adjusts enemies armor, hitpoints, move speed or attack rate is
// a bit random.
// In Survival mode the difficulty multiplier is increased over time,
// every 3rd wave.
void SetMapDifficultyMultiplier(fixed multiplier);

// In Survival mode:
// Prefer spawning groups with a cost of 240-400 with an interval of 7-24 seconds.

// NORMAL UNITS (cannon fodder)
// Drone: 20
// Infested Terran: 30 (very long weapon range)
// Zergling: 30
// Raptorling: 35
// Swarmling: 8
// Baneling: 25
// Hunterling: 30
// Splitterling: 30
// Roach: 80
// Roach Corpser: 100 (periodically spawns Roachlings)
// Vile Roach: 100
// Hydralisk: 80
// Queen: 120 (periodically heals self or others)
// Ultralisk: 400 (has burrow charge)
//
// RARE UNITS
// In Survival mode there can only ever
// be 1 single of these units alive per player
// on the map, in total.
// 
// Swarm Host: 200 (roots out of range of barracks units and periodically spawns locusts)
// Carrion Strain: 250 (flying locust, siege tank and marauder cant target)
// Noxious Ultralisk: 700 (with aura)
// Torrasque: 1200 (with reincarnation)
// Primal Ultralisk: 600 (insane regeneration)
// Infestor: 250 (neural parasite on marauders, fungal growth, spawn loads of infested)
// Viper: 300 (invulnerable, will cast blinding cloud on a random tower that lasts 20 seconds, and vanish)
// Brood Lord: 300 (invulnerable, will harass/lock barracks units for 30 seconds then vanish)
// Choker from L2D?!

// Call this to set the resources for stage 1 in Survival mode.
// After stage 1, this value is multiplied by 1.3 each stage.
// By default, it's set to the (players * 0.8) * 1000.
void SetSurvivalModeResources(fixed resources);

// Call this to give the enemy more or less resources per stage.
// Only has an effect in Survival mode.
// If the waves are preconfigured, this does nothing.
void SetMapEnemyResourceMultiplier(fixed multiplier);

// Call this to give the player building turrets more or less
// resources per kill and stage bonus.
// For example 2.0 would give player 1 6 minerals per Drone kill
// instead of 3. Minerals are always rounded up to the nearest, so
// if a kill would give 199.3 minerals, it gives 200.
void SetMapBuilderResourceMultiplier(fixed multiplier);

// Call this to give players other than the builder more than 0 resources per kill.
// By default, the builder gets 100% of the resources per kill and hero
// players get zero, nothing, 0, nill, null.
// If you set this, the builders resource do not change, but he will get more
// because he is also a hero player.
// So if an enemy unit gives 10 minerals when it dies, BY DEFAULT players get:
//  Player 1 (Builder + Hero): 10   +   0
//  Player 2, 3, 4 (Hero)    : 0
// If you set this multiplier to X, players get:
//  Player 1 (Builder + Hero): 10   +   10*X
//  Player 2, 3, 4 (Hero)    : 10*X
// Remember that the multiplier can be 0.2, for example, so an enemy that gives 10
// minerals normally would give 2.
// This is useful if you provide for example a building where players can
// purchase units to send towards the enemy. Or if you provide an item shop.
// If you want the builder player to get the same resources as everyone else,
// just call SetMapBuilderResourceMultiplier(0).
void SetMapHeroResourceMultiplier(fixed multiplier);




// The selected beacon or tower
unit zrCoreSelectedTower;

// The INT returned here is the dialog control ID for the Create button
// Each Tower should register for the dialogclicked event
// Cost in minerals
int zrCoreRegisterTowerClass(string unitType, int cost, string displayName, string description);

// XXX Ordering here is important, the first button registered is top
// and last is bottom. Then "Cancel" and "Sell".
// Returns the dialog control ID for the button. Each Tower class needs to handle the event.
int zrCoreRegisterUpgrade(int parent, int cost, string displayName, string description);

int zrCoreRegisterPersistentButton(string unitType, string displayName, string description);
// Create a custom button for the specified tower and level
int zrCoreRegisterButton(string unitType, int level, string displayName, string description);

// Attempts to create a tower at the currently selected spot, if any.
// If it fails, it returns the selected beacon unit instead of the new tower.
unit zrCoreTryCreateTower(int towerId, int cost);
// Towers call this when they upgrade themselves.
bool zrCoreUpgradeTower(unit tower, int cost);

// This is how we show information in the tower creation dialog.
string zrCoreFormatDescription(string name, string type, string desc, string strong, string weak, string upgrades, int cost);

// Core registers for unit selected beacon
// And on select, shows all registered tower class create buttons
// The core actually does UnitCreate
// Each tower registers for unitcreated and handles init for their tower

int zrUICreateTowerButton(string name);
int zrUICreateTowerButtonDesc(string desc);

// Gets the total amount of registered stages, use this coupled with the global zrStages[index];
// Remember, index is 1-based.
int zrStagesAmount();
