// custom trigger events
// TriggerSendEvent(string)
// TriggerAddEventGeneric(string)

triggers can be part of arrays, so you can execute arbitrary functions
with TriggerExecute(array[i])

	for (i = 0; i < queue.basics; i+=1)
	{
		TalentQueue_swap(queue, i, RandomInt(0, queue.basics-1));
	}
	for (i = queue.basics; i < queue.count; i+=1)
	{
		TalentQueue_swap(queue, i, RandomInt(queue.basics, queue.count-1));
	}

Over all
// 265 minerals first level
// Need mineral, life and wave counter
// Need wave incoming display
// Default death = 3 minerals, 5,

kanais cube system merged with CP2 perks?
- advanced players get a bonus
- no spam on level start to confuse new players
- 


validate.lua
	check waypoints around turret spawns are within range
	check entrances can reach exits
	waves should be 1...N without gaps
	
Set builder player ID after hero select so that someone else can do it?
That requires delaying init of all mechanics until after, shouldnt really be a problem.
Intro would have to be runnable without builder, obviously.
No hero select = player 1 builds then.

Auto turret:
	- Swap level 2 and 3 because increased damage is more damaging early probably


Barracks:
	- Obviously balance
	- Upgrade marines damage each level
	- Tint/shade waypoint select thing if not passable/too far off
		* Looks horrible with the actor tint red
	- Make units run back to waypoint if too far off?
	- Find good model for HSec Group barracks
	- Add upgrades to level 4
	- Remove buffs when caster or target dies
// Upgrade thoughts: Marauder Slow grenade, hitpoints, armor boost, periodic shockwave
// xxx no upgrade for medics, that is too boring
// Upgrade thoughts: Snipe damage / range, check the game on bnet with lots of ghosts for thoughts


Hero abilities
http://www.sc2mapster.com/maps/spell-contest-entry-power-matrix/
http://www.sc2mapster.com/forums/development/data/19218-weekly-data-exercise-12-recreate-a-wow-spell/?page=3#p56
http://www.sc2mapster.com/forums/resources/tutorials/23221-ability-energy-absolution/











//	UnitCreate(1, "Medivac", c_unitCreateIgnorePlacement, 1, UnitGetPosition(barracks), 270);
//	medivac = UnitLastCreated();
//	UnitGroupAdd(zrbUnitGroup[id], medivac);
//	UnitIssueOrder(medivac, OrderTargetingPoint(zr_CmdMove, RegionRandomPoint(wp)), c_orderQueueReplace);
	
//	UnitSetScale(medivac, 60.0, 60.0, 60.0);
	
	// So, either move to closest WP, or back to origin spot, 50/50.
void zrSiegeMoveRaven(unit raven) {
	fixed siegeX = UnitGetCustomValue(raven, zrcvsOriginX);
	fixed siegeY = UnitGetCustomValue(raven, zrcvsOriginY);

	point closest = zrsFindClosestThatIsNot(UnitGetPosition(raven), Point(siegeX, siegeY));
	point wp = zrsGetClosestWaypoint(raven);
	fixed wpX = UnitGetCustomValue(raven, zrcvsWPX);
	fixed wpY = UnitGetCustomValue(raven, zrcvsWPY);
	point sR = RegionRandomPoint(RegionCircle(Point(siegeX, siegeY), 3));
	point wR = RegionRandomPoint(RegionCircle(Point(siegeX, siegeY), 3));

}

bool zrsHandleUnitOrder(bool check, bool run) {
	unit this = EventUnit();
	order what = EventUnitOrder();
	string abil = AbilityCommandGetAbility(OrderGetAbilityCommand(what));
	int type = OrderGetTargetType(what);
	point where = OrderGetTargetPosition(what);
	if ( !run ) { return true; }
	if ( this != null ) {
		zrdbg("Order Unit", UnitGetType(this));
	}
	if ( where != null ) {
		zrdbg("Order Point", FixedToString(PointGetX(where), c_fixedPrecisionAny) + "/" + FixedToString(PointGetY(where), c_fixedPrecisionAny));
	}
	if ( abil != "" ) {
		zrdbg("Order Ability", abil);
	}
	return true;
}

bool zrsHandleAbility(bool check, bool run) {
	string abil = AbilityCommandGetAbility(EventUnitAbility());
	int stage = EventUnitAbilityStage();
	point where = EventUnitTargetPoint();
	unit target = EventUnitTargetUnit();
	unit me = EventUnit();
	if ( ! run ) { return true; }
	if ( abil != "" ) {
		zrdbg("Ability", abil);
	}
	if ( stage ) {
		zrdbg("Ability Stage", IntToString(stage));
	}
	if ( where != null ) {
		zrdbg("Ability Point", FixedToString(PointGetX(where), c_fixedPrecisionAny) + "/" + FixedToString(PointGetY(where), c_fixedPrecisionAny));
	}
	if ( target != null ) {
		zrdbg("Ability Target", UnitGetType(target));
	}
	if ( me != null ) {
		zrdbg("Ability Unit", UnitGetType(me));
	}
	return true;
}





	point x = PointFromName(exit);
	if ( x == null && exit != "" ) {
		x = RegionGetCenter(RegionFromName(exit));
	}
	if ( x == null ) {
		x = PointFromName("Exit");
	}
	if ( x == null ) {
		x = RegionGetCenter(RegionFromName("Exit"));
	}
	if ( x == null ) {
		// xxx show proper warning, not just debug
		zrdbg("Waves", "Found no exit.");
	}
	return x;

static string zrWaveEntranceAndExitID = "Entrance 1Exit 2";
make id for wavestruct
loop entranceandexitids
if not found in entranceandexitIDSTRING
	add it, with "|" after
	create truck at entrance
	set custom x + y on truck with exit point

move all trucks

struct entrancedata
	string name;
	point where;
	fixed pingx
	fixed pingy
	
static point[20] zrWavesEntrances;
static point[20] zrWavesExits;
static int zrWavesNumEntrances = 0;
static int zrWavesNumExits = 0;
static void zrWavesBuildPoints() {
	
}




// Start time / number of units / number of times / time between

// Spawn 3 zerglings every 4 seconds, in 6 waves
// This would last 6*4 = 24 seconds of game time.
// Zergling#3@4=6
// At 14 seconds, add in 3 Hydralisks with 1.5 seconds between them
// So this lasts 3*1.5=4.5 seconds
// 14:Hydralisk@1.5=3
// 2 seconds after zerglings, spawn 1 roach
// 26:Roach
// 2 seconds after roach, start zergling waves again
// 28:Zergling#3@4=6


// Level 2
// Wave 1: 4 zerglings every 4 seconds in 3 waves
// Zergling#4@4=3
// Wave 2: 18 drones in 3 waves with 1 second between
// Drone#6@1=3
// wave 3, 8 drones every 20 seconds, two times
// at 6 seconds, spawn 3 hydralisks every 7 seconds two times
// Drone#8@20=2 6:Hydralisk#3@7=2

static void crappyOldParsingStuff() {
 string wave1 = "Hydralisk#3@5";
 string wave2 = "Hydralisk+Zergling#3@5 Zergling#1";



 fixed ZR_SPAWN_STAGGER = 0.1;
	// ultralisk@5 should error, it's just one unit, one time, it doesnt need a pause.
	string level = "Drone@1#8%2:20 Hydralisk@6#3%2:7 Roach@31#100%300:200";
	// Drone@1#8%2:20
	// Hydralisk@6#3%2:7
	// Start time / number of units / number of times / time between
// # = number of units
// @ = pause between units
// space = next kind of trigger
// X: = start at this second of wave time, if this is not in, it starts immediately
// =X = number of times to run this, separated by @
	string[300] waveOne;
// StringFind starts at 0
// StringSub starts at 1
// First split in chunks
	int i = 1;
	string tmp = StringWord(level, i);
	int at;
	int hash;
	int percent;
	int colon;
	
	string unitType;
	int startTime;
	int unitAmount;
	int waves;
	int timeBetween;
	
	int counter = 0; // Start at 0 because for loops from 0 to 1 run once
	while ( tmp != "" ) {
		at = StringFind(tmp, "@", c_stringCase);
		unitType = StringSub(tmp, 1, at - 1);
		hash = StringFind(tmp, "#", c_stringCase);
		percent = StringFind(tmp, "%", c_stringCase);
		colon = StringFind(tmp, ":", c_stringCase);
		if (unitType == "" || at == -1 || hash == -1 || percent == -1 || colon == -1) {
			zrdbg("Parse", "Map developer error lulz: " + tmp);
			break;
		}
		startTime = StringToInt(StringSub(tmp, at + 1, hash - 1));
		unitAmount = StringToInt(StringSub(tmp, hash + 1, percent - 1));
		waves = StringToInt(StringSub(tmp, percent + 1, colon - 1));
		timeBetween = StringToInt(StringSub(tmp, colon + 1, StringLength(tmp)));

		// Alright we are parsed, build the table
		for (; counter < unitAmount; counter += 1) {
			waveOne[startTime] = waveOne[startTime] + " " + unitType;
		}
		
		i += 1;
		tmp = StringWord(level, i);
	}
}

